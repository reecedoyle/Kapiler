
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 14 19:15:05 GMT 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 14 19:15:05 GMT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\005\000\002\002\004\000\002\003" +
    "\007\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\013\000\002\007\013\000\002\010\004\000\002" +
    "\012\005\000\002\011\004\000\002\011\002\000\002\013" +
    "\003\000\002\014\005\000\002\015\004\000\002\015\002" +
    "\000\002\016\005\000\002\016\002\000\002\017\005\000" +
    "\002\020\005\000\002\021\004\000\002\021\002\000\002" +
    "\022\005\000\002\022\002\000\002\023\010\000\002\024" +
    "\005\000\002\024\002\000\002\025\005\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\063\003\000\002\063\005\000\002\032" +
    "\003\000\002\032\003\000\002\033\006\000\002\033\003" +
    "\000\002\034\006\000\002\035\005\000\002\035\006\000" +
    "\002\036\005\000\002\036\004\000\002\036\004\000\002" +
    "\037\005\000\002\037\002\000\002\040\006\000\002\040" +
    "\002\000\002\041\004\000\002\041\002\000\002\042\005" +
    "\000\002\042\002\000\002\043\005\000\002\044\003\000" +
    "\002\061\006\000\002\062\003\000\002\062\005\000\002" +
    "\045\004\000\002\045\002\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\004" +
    "\000\002\046\003\000\002\046\003\000\002\047\006\000" +
    "\002\050\003\000\002\050\004\000\002\050\003\000\002" +
    "\050\003\000\002\051\007\000\002\052\004\000\002\053" +
    "\010\000\002\054\011\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\055" +
    "\003\000\002\055\005\000\002\055\005\000\002\055\004" +
    "\000\002\056\005\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\030\004\005\005\025\006\ufffd\020\011\021" +
    "\021\022\006\023\024\024\022\025\010\026\023\063\015" +
    "\001\002\000\032\002\ufff9\004\ufff9\005\ufff9\006\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\063\ufff9\001\002\000\004\063\303\001\002\000\010\040" +
    "\uffde\041\uffde\063\uffde\001\002\000\032\002\ufffd\004\005" +
    "\005\025\006\ufffd\020\011\021\021\022\006\023\024\024" +
    "\022\025\010\026\023\063\015\001\002\000\010\040\uffdb" +
    "\041\uffdb\063\uffdb\001\002\000\010\040\uffe0\041\uffe0\063" +
    "\uffe0\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\063\ufffa\001\002\000\004\063\172\001\002\000\004" +
    "\002\300\001\002\000\010\040\uffd9\041\uffd9\063\uffd9\001" +
    "\002\000\032\002\ufffb\004\ufffb\005\ufffb\006\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\063" +
    "\ufffb\001\002\000\010\040\uffe1\041\uffe1\063\uffe1\001\002" +
    "\000\004\006\272\001\002\000\010\040\uffdf\041\uffdf\063" +
    "\uffdf\001\002\000\010\040\uffdc\041\uffdc\063\uffdc\001\002" +
    "\000\010\040\uffda\041\uffda\063\uffda\001\002\000\010\040" +
    "\uffdd\041\uffdd\063\uffdd\001\002\000\024\006\030\020\011" +
    "\021\021\022\006\023\024\024\022\025\010\026\023\063" +
    "\015\001\002\000\010\040\uffe2\041\uffe2\063\uffe2\001\002" +
    "\000\032\002\ufffc\004\ufffc\005\ufffc\006\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\063\ufffc" +
    "\001\002\000\004\063\257\001\002\000\004\063\032\001" +
    "\002\000\004\030\033\001\002\000\024\020\011\021\021" +
    "\022\006\023\024\024\022\025\010\026\023\031\uffc0\063" +
    "\015\001\002\000\004\031\044\001\002\000\004\063\036" +
    "\001\002\000\006\031\uffbe\041\037\001\002\000\022\020" +
    "\011\021\021\022\006\023\024\024\022\025\010\026\023" +
    "\063\015\001\002\000\004\031\uffc1\001\002\000\004\063" +
    "\042\001\002\000\006\031\uffbe\041\037\001\002\000\004" +
    "\031\uffbf\001\002\000\004\032\045\001\002\000\040\004" +
    "\005\010\060\012\064\013\054\015\uffb3\016\046\017\067" +
    "\020\011\021\021\022\006\023\024\024\022\025\010\026" +
    "\023\063\061\001\002\000\004\063\255\001\002\000\042" +
    "\004\uffb0\010\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\033\uffb0\063\uffb0\001\002\000\042\004\005\010" +
    "\060\012\064\013\054\015\uffb3\016\046\017\067\020\011" +
    "\021\021\022\006\023\024\024\022\025\010\026\023\033" +
    "\uffb3\063\061\001\002\000\042\004\uffaf\010\uffaf\012\uffaf" +
    "\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\033\uffaf\063\uffaf" +
    "\001\002\000\042\004\uffac\010\uffac\012\uffac\013\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\033\uffac\063\uffac\001\002\000" +
    "\044\004\uffaa\010\uffaa\011\251\012\uffaa\013\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\033\uffaa\063\uffaa\001\002\000\004" +
    "\030\244\001\002\000\042\004\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\033\uffb2\063\uffb2\001" +
    "\002\000\042\004\uffa8\010\uffa8\012\uffa8\013\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\033\uffa8\063\uffa8\001\002\000\004" +
    "\040\243\001\002\000\004\030\237\001\002\000\014\030" +
    "\170\040\uffcd\042\171\043\uffcd\063\uffd9\001\002\000\004" +
    "\015\234\001\002\000\006\015\uffb8\033\uffb8\001\002\000" +
    "\004\030\223\001\002\000\006\040\ufff3\043\216\001\002" +
    "\000\042\004\uffb1\010\uffb1\012\uffb1\013\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\033\uffb1\063\uffb1\001\002\000\030\034" +
    "\076\036\103\040\uffbc\046\111\060\077\061\112\062\116" +
    "\063\101\064\104\065\114\066\117\001\002\000\042\004" +
    "\uffad\010\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\033\uffad\063\uffad\001\002\000\004\033\073\001\002" +
    "\000\042\004\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\033\uffa7\063\uffa7\001\002\000\032\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\063\ufff8\001\002\000" +
    "\004\040\215\001\002\000\046\007\uffd0\031\uffd0\035\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\001\002\000\034\030\134\034\076\035" +
    "\uffe9\036\103\046\111\060\077\061\112\062\116\063\101" +
    "\064\104\065\114\066\117\067\133\001\002\000\046\007" +
    "\uffd4\031\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000\046" +
    "\007\uffcf\031\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000" +
    "\054\007\uffcd\030\170\031\uffcd\034\167\035\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\171\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\001\002\000\046\007\uffcb\031\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\001\002\000\034\030\134\034\076" +
    "\036\103\037\uffef\046\111\060\077\061\112\062\116\063" +
    "\101\064\104\065\114\066\117\067\133\001\002\000\046" +
    "\007\uffd3\031\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000" +
    "\046\007\uffd2\031\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002" +
    "\000\046\007\uffc8\031\uffc8\035\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\001" +
    "\002\000\012\031\uffba\040\uffba\041\126\052\124\001\002" +
    "\000\046\007\uffce\031\uffce\035\uffce\037\uffce\040\uffce\041" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001" +
    "\002\000\026\034\076\036\103\046\111\060\077\061\112" +
    "\062\116\063\101\064\104\065\114\066\117\001\002\000" +
    "\046\007\uffd8\031\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002" +
    "\000\046\007\uffca\031\uffca\035\uffca\037\uffca\040\uffca\041" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\001" +
    "\002\000\046\007\uffd5\031\uffd5\035\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\001\002\000\046\007\uffd1\031\uffd1\035\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\001\002\000\046\007\uffd7\031\uffd7\035\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\001\002\000\004\030\120\001\002\000\004\063" +
    "\121\001\002\000\004\031\122\001\002\000\046\007\uffc9" +
    "\031\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000\046\007" +
    "\uffd6\031\uffd6\035\uffd6\037\uffd6\040\uffd6\041\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002\000\026" +
    "\034\076\036\103\046\111\060\077\061\112\062\116\063" +
    "\101\064\104\065\114\066\117\001\002\000\046\007\uffc6" +
    "\031\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\026\034" +
    "\076\036\103\046\111\060\077\061\112\062\116\063\101" +
    "\064\104\065\114\066\117\001\002\000\006\031\uffbd\040" +
    "\uffbd\001\002\000\012\031\uffba\040\uffba\041\126\052\124" +
    "\001\002\000\006\031\uffbb\040\uffbb\001\002\000\032\007" +
    "\152\044\147\045\156\046\146\047\154\050\157\051\151" +
    "\053\150\054\161\055\162\056\155\057\165\001\002\000" +
    "\032\030\134\034\076\036\103\046\111\060\077\061\112" +
    "\062\116\063\101\064\104\065\114\066\117\067\133\001" +
    "\002\000\032\030\134\034\076\036\103\046\111\060\077" +
    "\061\112\062\116\063\101\064\104\065\114\066\117\067" +
    "\133\001\002\000\046\007\uff97\031\uff97\035\uff97\037\uff97" +
    "\040\uff97\041\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\124\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\001\002\000\006\037\uffed\041\141\001\002\000" +
    "\004\037\140\001\002\000\046\007\ufff1\031\ufff1\035\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\001\002\000\032\030\134\034\076\036" +
    "\103\046\111\060\077\061\112\062\116\063\101\064\104" +
    "\065\114\066\117\067\133\001\002\000\004\037\ufff0\001" +
    "\002\000\006\037\uffed\041\141\001\002\000\004\037\uffee" +
    "\001\002\000\032\007\152\031\160\044\147\045\156\046" +
    "\146\047\154\050\157\051\151\053\150\054\161\055\162" +
    "\056\155\001\002\000\032\030\uffa1\034\uffa1\036\uffa1\046" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\067\uffa1\001\002\000\032\030\uff9a\034\uff9a\036" +
    "\uff9a\046\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\001\002\000\032\030\uff9c\034" +
    "\uff9c\036\uff9c\046\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\067\uff9c\001\002\000\032\030" +
    "\uff9e\034\uff9e\036\uff9e\046\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\001\002\000" +
    "\032\030\uff9d\034\uff9d\036\uff9d\046\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\001" +
    "\002\000\032\030\134\034\076\036\103\046\111\060\077" +
    "\061\112\062\116\063\101\064\104\065\114\066\117\067" +
    "\133\001\002\000\032\030\uffa0\034\uffa0\036\uffa0\046\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\001\002\000\032\030\uff9b\034\uff9b\036\uff9b" +
    "\046\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\001\002\000\032\030\uffa2\034\uffa2" +
    "\036\uffa2\046\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\067\uffa2\001\002\000\032\030\uff9f" +
    "\034\uff9f\036\uff9f\046\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\001\002\000\044" +
    "\007\uff95\031\uff95\035\uff95\037\uff95\040\uff95\041\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\001\002\000\032\030" +
    "\uff99\034\uff99\036\uff99\046\uff99\060\uff99\061\uff99\062\uff99" +
    "\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\001\002\000" +
    "\032\030\uff98\034\uff98\036\uff98\046\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\001" +
    "\002\000\044\007\152\031\uff96\035\uff96\037\uff96\040\uff96" +
    "\041\uff96\044\147\045\156\046\146\047\154\050\157\051" +
    "\151\053\150\054\161\055\162\056\155\057\uff96\001\002" +
    "\000\044\007\152\031\uff94\035\uff94\037\uff94\040\uff94\041" +
    "\uff94\044\147\045\156\046\146\047\154\050\157\051\151" +
    "\053\150\054\161\055\162\056\155\057\uff94\001\002\000" +
    "\032\030\134\034\076\036\103\046\111\060\077\061\112" +
    "\062\116\063\101\064\104\065\114\066\117\067\133\001" +
    "\002\000\034\007\152\037\uffec\041\uffec\044\147\045\156" +
    "\046\146\047\154\050\157\051\151\053\150\054\161\055" +
    "\162\056\155\001\002\000\030\034\076\036\103\046\111" +
    "\057\176\060\077\061\112\062\116\063\101\064\104\065" +
    "\114\066\117\001\002\000\030\031\uffbc\034\076\036\103" +
    "\046\111\060\077\061\112\062\116\063\101\064\104\065" +
    "\114\066\117\001\002\000\004\063\172\001\002\000\052" +
    "\007\uffcd\031\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\171\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\001\002\000\050\007\uffcc\031\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\001\002\000\004\031\175\001\002\000" +
    "\046\007\uffab\031\uffab\035\uffab\037\uffab\040\uffab\041\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\001\002" +
    "\000\026\034\076\036\103\046\111\060\077\061\112\062" +
    "\116\063\101\064\104\065\114\066\117\001\002\000\010" +
    "\035\202\052\124\057\203\001\002\000\004\035\201\001" +
    "\002\000\046\007\uffc5\031\uffc5\035\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\001\002\000\046\007\uffc7\031\uffc7\035\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\001\002\000\030\034\076\035\uffc3\036\103\046\111" +
    "\060\077\061\112\062\116\063\101\064\104\065\114\066" +
    "\117\001\002\000\006\035\uffc4\052\124\001\002\000\006" +
    "\035\uffc2\052\124\001\002\000\004\035\214\001\002\000" +
    "\036\007\152\035\uffe7\040\uffe7\041\210\044\147\045\156" +
    "\046\146\047\154\050\157\051\151\053\150\054\161\055" +
    "\162\056\155\001\002\000\032\030\134\034\076\036\103" +
    "\046\111\060\077\061\112\062\116\063\101\064\104\065" +
    "\114\066\117\067\133\001\002\000\006\035\uffea\040\uffea" +
    "\001\002\000\036\007\152\035\uffe7\040\uffe7\041\210\044" +
    "\147\045\156\046\146\047\154\050\157\051\151\053\150" +
    "\054\161\055\162\056\155\001\002\000\006\035\uffe8\040" +
    "\uffe8\001\002\000\046\007\uffeb\031\uffeb\035\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\001\002\000\042\004\uff93\010\uff93\012\uff93\013" +
    "\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\033\uff93\063\uff93\001" +
    "\002\000\034\030\134\034\076\036\103\040\uffe9\046\111" +
    "\060\077\061\112\062\116\063\101\064\104\065\114\066" +
    "\117\067\133\001\002\000\004\040\220\001\002\000\050" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\033\ufff5\063\ufff5\001" +
    "\002\000\004\040\ufff4\001\002\000\004\040\ufff2\001\002" +
    "\000\004\063\224\001\002\000\004\057\225\001\002\000" +
    "\004\063\226\001\002\000\004\031\227\001\002\000\004" +
    "\032\230\001\002\000\040\004\005\010\060\012\064\013" +
    "\054\016\046\017\067\020\011\021\021\022\006\023\024" +
    "\024\022\025\010\026\023\033\uffb3\063\061\001\002\000" +
    "\042\004\uffa3\010\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\033\uffa3\063\uffa3\001\002\000\004\033\233" +
    "\001\002\000\044\004\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\033\uffb9\063\uffb9\001" +
    "\002\000\032\030\134\034\076\036\103\046\111\060\077" +
    "\061\112\062\116\063\101\064\104\065\114\066\117\067" +
    "\133\001\002\000\032\007\152\040\236\044\147\045\156" +
    "\046\146\047\154\050\157\051\151\053\150\054\161\055" +
    "\162\056\155\001\002\000\004\033\uffb7\001\002\000\032" +
    "\030\134\034\076\036\103\046\111\060\077\061\112\062" +
    "\116\063\101\064\104\065\114\066\117\067\133\001\002" +
    "\000\032\007\152\031\241\044\147\045\156\046\146\047" +
    "\154\050\157\051\151\053\150\054\161\055\162\056\155" +
    "\001\002\000\004\032\230\001\002\000\044\004\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\033\uffa6\063\uffa6\001\002\000\042\004\uffae\010\uffae" +
    "\012\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\033\uffae" +
    "\063\uffae\001\002\000\032\030\134\034\076\036\103\046" +
    "\111\060\077\061\112\062\116\063\101\064\104\065\114" +
    "\066\117\067\133\001\002\000\032\007\152\031\246\044" +
    "\147\045\156\046\146\047\154\050\157\051\151\053\150" +
    "\054\161\055\162\056\155\001\002\000\004\014\247\001" +
    "\002\000\004\032\230\001\002\000\042\004\uffa4\010\uffa4" +
    "\012\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\033\uffa4" +
    "\063\uffa4\001\002\000\004\032\230\001\002\000\042\004" +
    "\uffa9\010\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\033\uffa9\063\uffa9\001\002\000\042\004\uffa5\010\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\033\uffa5" +
    "\063\uffa5\001\002\000\006\015\uffb4\033\uffb4\001\002\000" +
    "\004\040\256\001\002\000\042\004\uff92\010\uff92\012\uff92" +
    "\013\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\033\uff92\063\uff92" +
    "\001\002\000\004\030\260\001\002\000\024\020\011\021" +
    "\021\022\006\023\024\024\022\025\010\026\023\031\uffc0" +
    "\063\015\001\002\000\004\031\262\001\002\000\004\032" +
    "\263\001\002\000\042\004\005\010\060\012\064\013\054" +
    "\015\uffb3\016\046\017\067\020\011\021\021\022\006\023" +
    "\024\024\022\025\010\026\023\033\uffb3\063\061\001\002" +
    "\000\006\015\267\033\uffb6\001\002\000\004\033\266\001" +
    "\002\000\032\002\ufff7\004\ufff7\005\ufff7\006\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\063" +
    "\ufff7\001\002\000\004\040\270\001\002\000\004\033\uffb5" +
    "\001\002\000\030\002\ufffd\004\005\005\025\020\011\021" +
    "\021\022\006\023\024\024\022\025\010\026\023\063\015" +
    "\001\002\000\004\027\273\001\002\000\004\032\274\001" +
    "\002\000\042\004\005\010\060\012\064\013\054\015\uffb3" +
    "\016\046\017\067\020\011\021\021\022\006\023\024\024" +
    "\022\025\010\026\023\033\uffb3\063\061\001\002\000\004" +
    "\033\276\001\002\000\030\002\uffff\004\uffff\005\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\063\uffff\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002\000\050\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\010\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\033\ufff6\063\ufff6\001\002\000\006\002\ufffe\006\ufffe\001" +
    "\002\000\004\057\304\001\002\000\004\063\305\001\002" +
    "\000\004\057\314\001\002\000\006\040\uffe4\041\307\001" +
    "\002\000\004\063\305\001\002\000\004\040\311\001\002" +
    "\000\050\002\uffe6\004\uffe6\005\uffe6\006\uffe6\010\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\033\uffe6\063" +
    "\uffe6\001\002\000\006\040\uffe4\041\307\001\002\000\004" +
    "\040\uffe5\001\002\000\022\020\011\021\021\022\006\023" +
    "\024\024\022\025\010\026\023\063\015\001\002\000\006" +
    "\040\uffe3\041\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\026\002\013\004\017\005\006\006\026\007" +
    "\015\010\011\023\003\026\012\027\025\030\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\301\005\006\006\026\007\015\010\011\023\003" +
    "\026\012\027\025\030\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\300\063\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\030\027\025\030\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\034\027\025\030\016" +
    "\037\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\037\001\001\000\010\026\040\027\025\030\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\010\054\012\065\023\046\026\012\027\025\030\016\044" +
    "\061\045\062\046\047\047\056\050\050\051\052\053\055" +
    "\054\071\056\051\057\067\061\070\063\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\010\054\012\065" +
    "\023\046\026\012\027\025\030\016\045\253\046\047\047" +
    "\056\050\050\051\052\053\055\054\071\056\051\057\067" +
    "\063\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\216\001\001\000\002\001\001\000" +
    "\026\014\104\020\114\031\106\032\074\033\101\034\105" +
    "\035\112\041\073\047\077\063\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\104\020" +
    "\114\021\205\031\134\032\074\033\101\034\105\035\112" +
    "\047\077\055\206\063\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\014\104\015\136\017\135\020\114\031\134\032\074\033" +
    "\101\034\105\035\112\047\077\055\131\063\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\126\001\001\000\002\001\001\000\024\014\104" +
    "\020\114\031\122\032\074\033\101\034\105\035\112\047" +
    "\077\063\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\104\020\114\031" +
    "\124\032\074\033\101\034\105\035\112\047\077\063\107" +
    "\001\001\000\002\001\001\000\024\014\104\020\114\031" +
    "\127\032\074\033\101\034\105\035\112\047\077\063\107" +
    "\001\001\000\002\001\001\000\004\042\130\001\001\000" +
    "\002\001\001\000\004\060\152\001\001\000\026\014\104" +
    "\020\114\031\134\032\074\033\101\034\105\035\112\047" +
    "\077\055\163\063\107\001\001\000\026\014\104\020\114" +
    "\031\134\032\074\033\101\034\105\035\112\047\077\055" +
    "\144\063\107\001\001\000\002\001\001\000\004\016\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\104\017\142\020\114\031\134\032\074\033\101\034\105" +
    "\035\112\047\077\055\131\063\107\001\001\000\002\001" +
    "\001\000\004\016\143\001\001\000\002\001\001\000\004" +
    "\060\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\104\020\114\031\134\032\074\033\101\034\105\035" +
    "\112\047\077\055\162\063\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\152\001\001\000\004\060\152\001\001\000\026\014" +
    "\104\020\114\031\134\032\074\033\101\034\105\035\112" +
    "\047\077\055\165\063\107\001\001\000\004\060\152\001" +
    "\001\000\026\014\104\020\114\031\176\032\074\033\101" +
    "\034\105\035\112\036\177\047\077\063\107\001\001\000" +
    "\026\014\104\020\114\031\106\032\074\033\101\034\105" +
    "\035\112\041\173\047\077\063\107\001\001\000\004\063" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\104\020\114\031" +
    "\204\032\074\033\101\034\105\035\112\047\077\063\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\104\020\114\031\203" +
    "\032\074\033\101\034\105\035\112\047\077\063\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\210\060\152\001\001\000\026\014\104\020" +
    "\114\031\134\032\074\033\101\034\105\035\112\047\077" +
    "\055\211\063\107\001\001\000\002\001\001\000\006\022" +
    "\212\060\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\220\014\104\020\114\021" +
    "\221\031\134\032\074\033\101\034\105\035\112\047\077" +
    "\055\206\063\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\230\001\001\000\044\010\054\012\065\023\046" +
    "\026\012\027\025\030\016\044\231\045\062\046\047\047" +
    "\056\050\050\051\052\053\055\054\071\056\051\057\067" +
    "\063\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\104\020\114\031\134\032\074" +
    "\033\101\034\105\035\112\047\077\055\234\063\107\001" +
    "\001\000\004\060\152\001\001\000\002\001\001\000\026" +
    "\014\104\020\114\031\134\032\074\033\101\034\105\035" +
    "\112\047\077\055\237\063\107\001\001\000\004\060\152" +
    "\001\001\000\004\043\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\104\020\114\031\134\032\074" +
    "\033\101\034\105\035\112\047\077\055\244\063\107\001" +
    "\001\000\004\060\152\001\001\000\002\001\001\000\004" +
    "\043\247\001\001\000\002\001\001\000\004\043\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\034\027\025\030\016\037\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\010\054\012\065\023" +
    "\046\026\012\027\025\030\016\044\263\045\062\046\047" +
    "\047\056\050\050\051\052\053\055\054\071\056\051\057" +
    "\067\062\264\063\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\276\005\006\006\026\007\015\010\011" +
    "\023\003\026\012\027\025\030\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\010\054\012\065\023\046" +
    "\026\012\027\025\030\016\044\263\045\062\046\047\047" +
    "\056\050\050\051\052\053\055\054\071\056\051\057\067" +
    "\062\274\063\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\305\001" +
    "\001\000\002\001\001\000\004\024\307\001\001\000\004" +
    "\025\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\312\001\001\000\002\001\001\000\010\026\314" +
    "\027\025\030\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




		public String rule;
		
		public void report_error(String message, Object info){

			StringBuffer m = new StringBuffer("Error");
			if (info instanceof java_cup.runtime.Symbol) {
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0){
					m.append(" in line "+(s.left+1));
				}
			}
			m.append(": rule \""+rule+"\" violated");
			System.err.println(m);
		}
		public void report_fatal_error(String message, Object info) {
			report_error(message, info);
		}
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // read ::= READ ID SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // print ::= PRINT actual_param_list_opt SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= expr oper expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // oper ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // oper ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // oper ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // oper ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // oper ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // oper ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // oper ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // oper ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // oper ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // oper ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // oper ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // foreach_statement ::= FOREACH LPAREN ID COLON ID RPAREN block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // while_statement ::= WHILE LPAREN expr RPAREN DO block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // else_statement ::= ELSE block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_statement ::= IF LPAREN expr RPAREN block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // control_statement ::= foreach_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // control_statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // control_statement ::= if_statement else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // control_statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_call ::= ID LPAREN actual_param_list_opt RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= control_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= typedef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= var_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= var_def_with_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // void_function_body ::= body RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void_function_body",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // void_function_body ::= body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void_function_body",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_body ::= body RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // body ::= statement_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // block ::= LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // actual_param_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // actual_param_list ::= COMMA value actual_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // actual_param_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list_opt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // actual_param_list_opt ::= value actual_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list_opt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // formal_param_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // formal_param_list ::= COMMA type ID formal_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // formal_param_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list_opt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // formal_param_list_opt ::= type ID formal_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list_opt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // splice ::= COLON value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("splice",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // splice ::= value COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("splice",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // splice ::= value COLON value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("splice",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vals_from_seq ::= ID LBRACK splice RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals_from_seq",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vals_from_seq ::= value CONCAT value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals_from_seq",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // val_from_index ::= ID LBRACK value RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_from_index",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // numeric_vals_from_aggs ::= val_from_index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_vals_from_aggs",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // numeric_vals_from_aggs ::= LEN LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_vals_from_aggs",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vals_from_aggs ::= vals_from_seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals_from_aggs",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vals_from_aggs ::= numeric_vals_from_aggs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vals_from_aggs",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ids ::= ID DOT ids 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ids ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= ids 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= vals_from_aggs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= listassign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= dictassign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= MINUS value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aggregate_type ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aggregate_type ::= DICT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aggregate_type ::= LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aggregate_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primitive_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primitive_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primitive_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primitive_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= aggregate_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typefield ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typefield",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typefields ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typefields",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typefields ::= COMMA typefield typefields 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typefields",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typedef ::= TDEF ID COLON typefield typefields SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listelems ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listelems",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listelems ::= COMMA expr listelems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listelems",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listdef ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listdef",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listdef ::= expr listelems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listdef",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listassign ::= LBRACK listdef RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listassign",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dictelem ::= expr COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictelem",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dictelems ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictelems",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dictelems ::= COMMA dictelem dictelems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictelems",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dictdef ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictdef",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dictdef ::= dictelem dictelems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictdef",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dictassign ::= LDICT dictdef RDICT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictassign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varassign ::= listdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varassign",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varinit ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varinit ::= EQ varassign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varinit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_def ::= ids varinit SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_def_with_type ::= type var_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def_with_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // void_funcdef ::= DEF VOID ID LPAREN formal_param_list_opt RPAREN LBRACE void_function_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void_funcdef",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcdef ::= DEF type ID LPAREN formal_param_list_opt RPAREN LBRACE function_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= typedef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= var_def_with_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= void_funcdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decllist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decllist ::= decl decllist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decllist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= VOID MAIN LBRACE void_function_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decllist main decllist 
            {
              Object RESULT =null;
		 System.out.println("-------end of parsing-------"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

