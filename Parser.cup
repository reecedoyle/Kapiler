
	import java_cup.runtime.*;

	parser code {:

		public String getErrorMessage(String symbolNum){
			int n = Integer.parseInt(symbolNum.replaceAll("#", ""));

			switch(n){
				case 0:
					return "expected token at end of file";
				case 1:
					return "unidentified error";
				case 2:
					return "unexpected keyword typedef";
				case 3:
					return "unexpected keyword def";
				case 4:
					return "unexpected keyword void";
				case 5:
					return "unexpected keyword in";
				case 6:
					return "unexpected keyword if";
				case 7:
					return "unexpected keyword else";
				case 8:
					return "unexpected keyword foreach";
				case 9:
					return "unexpected keyword while";
				case 10:
					return "unexpected keyword do";
				case 11:
					return "unexpected keyword return";
				case 12:
					return "unexpected function call read";
				case 13:
					return "unexpected function call print";
				case 14:
					return "unexpected keyword char";
				case 15:
					return "unexpected keyword boolean";
				case 16:
					return "unexpected keyword int";
				case 17:
					return "unexpected keyword float";
				case 18:
					return "unexpected keyword string";
				case 19:
					return "unexpected keyword list";
				case 20:
					return "unexpected keyword dict";
				case 21:
					return "unexpected keyword main";
				case 22:
					return "unexpected (";
				case 23:
					return "unexpected )";
				case 24:
					return "unexpected {";
				case 25:
					return "unexpected }";
				case 26:
					return "unexpected [";
				case 27:
					return "unexpected ]";
				case 28:
					return "unexpected [|";
				case 29:
					return "unexpected |]";
				case 30:
					return "unexpected semi colon";
				case 31:
					return "unexpected comma";
				case 32:
					return "unexpected dot";
				case 33:
					return "unexpected =";
				case 34:
					return "unexpected &&";
				case 35:
					return "unexpected +";
				case 36:
					return "unexpected -";
				case 37:
					return "unexpected *";
				case 38:
					return "unexpected /";
				case 39:
					return "unexpected ^";
				case 40:
					return "unexpected ::";
				case 41:
					return "unexpected ==";
				case 42:
					return "unexpected <";
				case 43:
					return "unexpected <=";
				case 44:
					return "unexpected !=";
				case 45:
					return "unexpected :";
				case 46:
					return "unexpected boolean literal";
				case 47:
					return "unexpected integer literal";
				case 48:
					return "unexpected float literal";
				case 49:
					return "unexpected identifier";
				case 50:
					return "unexpected string";
				case 51:
					return "unexpected char literal";
				case 52:
					return "unexpected len function call";
				case 53:
					return "unexpected !";
			}
			return "Unknown Error";
		}

		public void syntax_error(Symbol cur_token){
			String state = cur_token.toString();
			report_error(state, cur_token);
		}
		
		public void report_error(String message, Object info){

			StringBuffer m = new StringBuffer("Error");
			if (info instanceof java_cup.runtime.Symbol) {
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0){
					m.append(" in line "+(s.left+1));
				}
			}
			m.append(": "+getErrorMessage(message));
			System.err.println(m);
		}
		public void report_fatal_error(String message, Object info) {
			report_error(message, info);
		}
	:};

	terminal TDEF, DEF, VOID, IN, IF, ELSE, FOREACH, WHILE, DO, RETURN, READ, PRINT, CHAR, BOOLEAN, INT, FLOAT, STRING, LIST, DICT, MAIN, LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, LDICT, RDICT, SEMI, COMMA, DOT, EQ, AND, PLUS, MINUS, MULT, DIV, POW, CONCAT, EQEQ, LT, LTEQ, NOTEQ, COLON, BOOLEAN_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL, ID, STRING_LITERAL, CHARACTER_LITERAL, LEN, NOT;

	non terminal program, main, decllist, decl, funcdef, void_funcdef, var_def_with_type, varinit, var_def, varassign, dictassign, dictdef, dictelems, dictelem, listassign, listdef, listelems, typedef, typefields, typefield, type, primitive_type, aggregate_type, value, vals_from_aggs, numeric_vals_from_aggs, val_from_index, vals_from_seq, splice, formal_param_list_opt, formal_param_list, actual_param_list_opt, actual_param_list, block, body, statement_list, statement, function_call, control_statement, if_statement, else_statement, while_statement, foreach_statement, expr, print, read, oper, function_body, void_function_body, ids;

	precedence left EQEQ, LTEQ, NOTEQ, LT, AND, IN, CONCAT;
	precedence left PLUS, MINUS;
	precedence left MULT, DIV;
	precedence left POW;

	program		::= decllist main decllist	{: System.out.println("-------end of parsing-------\nparsing successful"); :}
				| error {: System.out.println("-------end of parsing-------\nparsing unsuccessful"); :}
		;

	main		::= VOID MAIN LBRACE void_function_body RBRACE
		;

	decllist	::= decl decllist
				| 
		;

	decl		::= funcdef
				| void_funcdef
				| var_def_with_type
				| typedef
		;

	funcdef		::= DEF type ID LPAREN formal_param_list_opt RPAREN LBRACE function_body RBRACE
		;

	void_funcdef ::= DEF VOID ID LPAREN formal_param_list_opt RPAREN LBRACE void_function_body RBRACE
		;	

	var_def_with_type	::= type var_def // eg. int x = 6 ;
		;

	var_def		::= ids varinit SEMI // eg. x = 5;
		;

	varinit		::= EQ varassign // set the variable to a value or null
				|
		;

varassign	::= listdef
	;
	

	/*---- DICTS & LISTS ----*/ // Provisionally complete

	dictassign	::= LDICT dictdef RDICT
		;

	dictdef		::= dictelem dictelems
				|
		;

	dictelems	::= COMMA dictelem dictelems
				|
		;

	dictelem 	::= expr COLON expr
		;

	listassign	::= LBRACK listdef RBRACK
		;

	listdef		::= expr listelems
				|
		;

	listelems	::= COMMA expr listelems
				|
		;

	/*------------------------------------*/

	/*---- TYPES ----*/

	typedef		::= TDEF ID COLON typefield typefields SEMI
		;

	typefields	::= COMMA typefield typefields
				|
		;

	typefield	::= ID COLON type
		;

	type		::= primitive_type //list of different types for function return
				| aggregate_type
		;

	primitive_type	::=	CHAR
					| BOOLEAN
					| INT
					| FLOAT
		;

	aggregate_type	::= STRING
					| LIST
					| DICT
					| ID // to account for user-defined types
		;



	/*---- VALUES ----*/
	value 		::= INTEGER_LITERAL
				| FLOAT_LITERAL
				| MINUS value
				| CHARACTER_LITERAL
				| BOOLEAN_LITERAL
				| STRING_LITERAL
				| dictassign
				| listassign
				| vals_from_aggs
				| function_call
				| ids
		;

	ids			::= ID
				| ID DOT ids
		;

	vals_from_aggs	::= numeric_vals_from_aggs
					| vals_from_seq
		;

	numeric_vals_from_aggs	::= LEN LPAREN ID RPAREN // len(d);
							| val_from_index
		;

	val_from_index	::= ID LBRACK value RBRACK // a[i]; d[k];
		;

	vals_from_seq	::= value CONCAT value // list :: list;
					| ID LBRACK splice RBRACK // list[i:j]; list[:j]; list[i:];
		;

	splice			::= value COLON value
					| value COLON
					| COLON value
		;

	/*------------------------------------*/


	/*---- PARAMETERS ----*/

	formal_param_list_opt	::= type ID formal_param_list
							|
		;

	formal_param_list	::= COMMA type ID formal_param_list
						|
		;

	actual_param_list_opt	::= value actual_param_list
							|
		;

	actual_param_list	::= COMMA value actual_param_list
						|
		;


	/*------------------------------------*/

	/*---- CONTROL STATEMENTS ----*/
	block	::= LBRACE body RBRACE
		;

	body	::= statement_list
		;

	function_body	::= body RETURN expr SEMI
		;

	void_function_body ::= body
						|  body RETURN SEMI
		;

	statement_list	::= statement statement_list
					 |
		;

	statement 	::= var_def_with_type
				| var_def
				| typedef
				| control_statement
				| function_call SEMI
				| read
				| print
				
		;

	function_call	::= ID LPAREN actual_param_list_opt RPAREN
		;

	control_statement ::= if_statement
						| if_statement else_statement
						| while_statement
						| foreach_statement
		;

	if_statement 	::= IF LPAREN expr RPAREN block
		;

	else_statement 	::= ELSE block
		;

	while_statement	::= WHILE LPAREN expr RPAREN DO block
		;

	foreach_statement	::= FOREACH LPAREN ID COLON ID RPAREN block
		;



	/*------------------------------------*/



	/*---- OPERATORS ----*/

	oper 	::= PLUS
			| MINUS
			| MULT
			| DIV
			| POW
			| IN
			| EQEQ
			| NOTEQ
			| AND
			| LT
			| LTEQ
		;

	expr 	::= value
			| expr oper expr
			| LPAREN expr RPAREN
			| NOT expr
		;

	/*------------------------------------*/

	/*---- I/O ----*/

	print ::= PRINT actual_param_list_opt SEMI
		;

	read  ::= READ ID SEMI
		;


	/*------------------------------------*/
