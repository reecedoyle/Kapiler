package Kapiler

import java_cup.runtime.*;

terminal TDEF, DEF, VOID, IN, IF, ELSE, FOREACH, WHILE, DO, RETURN, READ, PRINT, CHAR, BOOLEAN, INT, FLOAT, STRING, LIST, DICT, MAIN, LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, LDICT, RDICT, SEMI, COMMA, DOT, EQ, NOT, AND, PLUS, MINUS, MULT, DIV, POW, CONCAT, LT, LTEQ, NOTEQ, COLON, BOOLEAN_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL, ID, STRING_LITERAL, CHARACTER_LITERAL, LEN;

non terminal ;

program		::= decllist main decllist	{: System.out.println("-------end of parsing-------"); :}
	;

main		::= VOID MAIN block
	;

decllist	::= decllist decl
			| 
	;

decl		::= funcdef
			| vardef
			| typedef
	;

body	::= vardef body
		| vareassign
		| control_statment
	;

funcdef		::= DEF type ID LPAREN paramlist RPAREN body
	;

vardef		::= type ID varinit SEMI
	;

varinit		::= EQ varassign
			|
	;

varreassign	::= ID varinit
	;

varassign	::= value
			| dictassign
			| listassign
	;

/*---- DICTS & LISTS ----*/ // Provisionally complete

dictassign	::= LDICT dictdef RDICT SEMI
	;

dictdef		::= dictval dictvals
			|
	;

dictvals	::= COMMA dictval dictvals
			|
	;

dictval 	::= value COLON value
	;

listassign	::= LBRACK listdef RBRACK SEMI
	;

listdef		::= value listvals
			|
	;

listvals	::= COMMA value listvals
			|
	;

/*------------------------------------*/

/*---- TYPES ----*/

typedef		::= TDEF ID COLON typefield typefields SEMI
	;

typefields	::= typefield typefields
			|
	;

typefield	::= ID COLON type
	;

type		::= CHAR //list of different types for function return
			| BOOLEAN
			| INT
			| FLOAT
			| STRING
			| LIST
			| DICT
			| ID // to account for user-defined types
	;

value 		::= primitive_value
			| STRING_LITERAL
			| boolean_value
	;

primitive_value ::= CHARACTER_LITERAL
			| INTEGER_LITERAL
			| FLOAT_LITERAL
	;

paramlist	::= //parsing of parameters to a function
	;
/*------------------------------------*/

/*---- CONTROL STATEMENTS ----*/
block := LBRACE body RBRACE
	;


control_statement ::= if_statement
					| if_statement else_statement
					| while_statement
					| foreach_statement
	;

if_statement ::= IF LPAREN expr RPAREN block
	;



/*------------------------------------*/


/*---- OPERATORS ----*/
boolean_value ::= BOOLEAN_LITERAL
				| expr
    ;


numeric_operator ::= PLUS
	;
dict_operator ::=
	;

seq_operator ::=
	;

comp_bool_operator ::= EQEQ
				| NOTEQ
				| AND

comp_primitive_operator ::= LT
						| LTEQ
						| EQEQ
	;



expr ::= BOOLEAN_LITERAL
		| NOT expr
		| primitive_value comp_primitive_operator primitive_value
		| boolean_value comp_bool_operator boolean_value
	;



/*------------------------------------*/
